name: ci

on:
  push:

env:
  CLUSTER_NAME: ziti-k8s-agent-regression 
  AWS_REGION: us-west-2
  GKE_REGION: us-central1
  GKE_NETWORK_NAME: default
  GKE_SUBNETWORK_NAME: default
  NF_NETWORK_NAME: ziti-k8s-agent-regression

jobs:
  # docker:
  #   runs-on: ubuntu-latest
  #   steps:
  #     -
  #       name: Checkout
  #       uses: actions/checkout@v4
  #     -
  #       name: Set up QEMU
  #       uses: docker/setup-qemu-action@v3
  #     -
  #       name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3
  #     -
  #       name: Login to Docker Hub
  #       uses: docker/login-action@v3
  #       with:
  #         username: ${{ secrets.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_TOKEN }}
  #     -
  #       name: Build and push
  #       uses: docker/build-push-action@v6
  #       with:
  #         context: .
  #         file: Dockerfile
  #         platforms: linux/amd64,linux/arm64
  #         push: true
  #         tags: elblag91/ziti-k8s-agent:${{ github.ref_name }}
  regression_test: 
    # needs: [docker]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps: 
      -
        name: Checkout
        uses: actions/checkout@v4
      - 
        name: Authenticate to AWS Cloud
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_FOR_GITHUB }}
          role-session-name: GitHubActions
          audience: sts.amazonaws.com
      -  
        name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCLOUD_WL_ID_FOR_GITHUB }}
          service_account: ${{ secrets.GCLOUD_SVC_ACCT_FOR_GITHUB }}
          audience: ${{ secrets.GCLOUD_AUD_ID_FOR_GITHUB }}
      -
        name: install-gcloud-cli
        uses: google-github-actions/setup-gcloud@v2
        with:
          version: latest
          install_components: gke-gcloud-auth-plugin
      -
        name: install-kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: latest
      -
        name: install-aws-cli
        uses: unfor19/install-aws-cli-action@v1
        with:
          version: 2                         
          verbose: false                     
          arch: amd64
      - 
        name: install-postman-jq-zet-cli
        run: |
          curl -o- "https://dl-cli.pstmn.io/install/linux64.sh" | sh
          sudo apt-get update
          sudo apt-get --yes install jq 
          curl -sSLf https://get.openziti.io/tun/scripts/install-ubuntu.bash | bash
          sudo systemctl enable --now ziti-edge-tunnel.service
          curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
          sudo mv /tmp/eksctl /usr/local/bin
          curl --silent https://api.github.com/repos/openziti/ziti/releases/latest \
          | grep "browser_download_url.*ziti-linux-amd64*" \
          | cut -d : -f 2,3 | tr -d \" \
          | wget -qi -
          ziti_binary_name=`curl -s https://api.github.com/repos/openziti/ziti/releases/latest \
          | grep "browser_download_url.*ziti-linux-amd64*" | cut -d / -f 9 | tr -d \"`
          tar xf $ziti_binary_name
          rm $ziti_binary_name
          sudo mv ziti /usr/local/bin
      # - 
      #   name: create-eks-cluster
      #   run: |
      #     cat <<EOF >eks-cluster.yaml
      #     apiVersion: eksctl.io/v1alpha5
      #     kind: ClusterConfig
      #     metadata:
      #       name: $CLUSTER_NAME
      #       region: $AWS_REGION
      #       version: "1.28"
      #     managedNodeGroups:
      #     - name: ng-1
      #       instanceType: t3.medium
      #       iam:
      #           withAddonPolicies:
      #             ebs: true
      #             fsx: true
      #             efs: true
      #       desiredCapacity: 2
      #       privateNetworking: true
      #       labels:
      #         nodegroup-type: workloads
      #       tags:
      #         nodegroup-role: worker
      #     vpc:
      #       cidr: 10.10.0.0/16
      #       publicAccessCIDRs: []
      #       # disable public access to endpoint and only allow private access
      #       clusterEndpoints:
      #         publicAccess: true
      #         privateAccess: true
      #     EOF
      #     eksctl create cluster -f ./eks-cluster.yaml
      #     echo "AWS_CLUSTER=$(kubectl config get-contexts -o name | grep $CLUSTER_NAME | grep eksctl)" >> $GITHUB_ENV   
      # -
      #   name: create-gke-cluster
      #   if: success() || failure()
      #   run: |
      #     gcloud container --project $GCP_PROJECT clusters create $CLUSTER_NAME \
      #     --region $GKE_REGION --no-enable-basic-auth \
      #     --release-channel "regular" --machine-type "e2-medium" \
      #     --disk-size "100" --metadata disable-legacy-endpoints=true \
      #     --service-account ${{ secrets.GCLOUD_SVC_ACCT_FOR_GITHUB }} \
      #     --network "projects/$GCP_PROJECT/global/networks/$GKE_NETWORK_NAME" \
      #     --subnetwork "projects/$GCP_PROJECT/regions/$GKE_REGION/subnetworks/$GKE_SUBNETWORK_NAME" \
      #     --no-enable-intra-node-visibility --cluster-dns=clouddns --cluster-dns-scope=cluster \
      #     --security-posture=standard --workload-vulnerability-scanning=disabled --no-enable-master-authorized-networks \
      #     --addons HorizontalPodAutoscaling,NodeLocalDNS,GcePersistentDiskCsiDriver --num-nodes "1" \
      #     --default-max-pods-per-node "110" --enable-ip-alias
      #     echo "GKE_CLUSTER=$(kubectl config get-contexts -o name | grep $CLUSTER_NAME | grep gke)" >> $GITHUB_ENV 
      # -
      #   name: test-cluster-pods
      #   if: success() || failure()
      #   run: |
      #     kubectl get pods --all-namespaces --context $AWS_CLUSTER
      #     kubectl get pods --all-namespaces --context $GKE_CLUSTER
      - 
        name: create-nf-network-services
        if: success() || failure()
        run: |
          cat <<EOF >nf-network-services-create.postman_collection.json
            {
              "info": {
                "_postman_id": "d81c56cc-f00e-4785-91ff-775c21e89ea0",
                "name": "nf-network-services-create",
                "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
                "_exporter_id": "3145648"
              },
              "item": [
                {
                  "name": "GetTokenFromCognito",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "const jsonData = pm.response.json();",
                          "pm.globals.set(\"jwt_token\", jsonData.access_token);",
                          "pm.globals.set(\"jwt_type\", jsonData.token_type);"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "basic",
                      "basic": [
                        {
                          "key": "password",
                          "value": "{{client_secret}}",
                          "type": "string"
                        },
                        {
                          "key": "username",
                          "value": "{{client_id}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/x-www-form-urlencoded"
                      }
                    ],
                    "body": {
                      "mode": "urlencoded",
                      "urlencoded": [
                        {
                          "key": "grant_type",
                          "value": "client_credentials",
                          "type": "text"
                        },
                        {
                          "key": "scope",
                          "value": "",
                          "type": "text"
                        }
                      ]
                    },
                    "url": {
                      "raw": "{{token}}",
                      "host": [
                        "{{token}}"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "CreateNetwork",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "const jsonData = pm.response.json();\r",
                          "pm.globals.set('networkId', jsonData.id)"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "NF-OrganizationId",
                        "value": "a645e9ce-e49f-49f2-a6f8-6369822dd412"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"networkGroupId\": \"bce07cd1-8f36-44a3-b279-26426e7a53ef\",\n  \"name\" : \"{{networkName}}\",\n  \"provider\": \"AWS\",\n  \"size\" : \"medium\",\n  \"region\" : \"us-east-2\"\n}"
                    },
                    "url": {
                      "raw": "{{api}}/networks",
                      "host": [
                        "{{api}}"
                      ],
                      "path": [
                        "networks"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "GetNetwork",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Repeating request with capture (recursive)\", function () {\r",
                          "  let repetitions = 200;\r",
                          "  let delayInMilliseconds = 10000;\r",
                          "  let currentIteration = 1;\r",
                          "\r",
                          "  function handleResponse(err, response) {\r",
                          "    if (err) {\r",
                          "        console.error(\"Request failed:\", err);\r",
                          "        return;\r",
                          "    }\r",
                          "    console.log(\"Iteration\", currentIteration, \"Date createdAt:\", response.json().createdAt, \"Date nowAt:\", response.headers.get(\"Date\"), \"Status:\", response.json().status); \r",
                          "    if (response.json().status === \"PROVISIONED\") {\r",
                          "        repetitions = 0;\r",
                          "    }\r",
                          "  }\r",
                          "\r",
                          "  function repeatRequest() {\r",
                          "    \r",
                          "    pm.sendRequest(pm.request, handleResponse);\r",
                          "    if (currentIteration > repetitions) {\r",
                          "      return;\r",
                          "    }\r",
                          "\r",
                          "    setTimeout(function() {\r",
                          "      currentIteration++;\r",
                          "      repeatRequest(); \r",
                          "    }, delayInMilliseconds);\r",
                          "  }\r",
                          "\r",
                          "  repeatRequest();\r",
                          "});\r",
                          "\r",
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "url": {
                      "raw": "{{api}}/networks/{{networkId}}",
                      "host": [
                        "{{api}}"
                      ],
                      "path": [
                        "networks",
                        "{{networkId}}"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "NetworkExchange",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "const jsonData = pm.response.json();\r",
                          "pm.globals.set('api_token', jsonData.value)\r",
                          "pm.globals.set('controller-api-endpoint', jsonData.networkControllerUrl)"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "NF-OrganizationId",
                        "value": "a645e9ce-e49f-49f2-a6f8-6369822dd412"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"type\": \"session\"\n}"
                    },
                    "url": {
                      "raw": "{{api}}/networks/{{networkId}}/exchange",
                      "host": [
                        "{{api}}"
                      ],
                      "path": [
                        "networks",
                        "{{networkId}}",
                        "exchange"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Create Edge Router Ziti",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "const jsonData = pm.response.json();\r",
                          "pm.globals.set('edgeRouterId', jsonData.data.id)"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "packages": {},
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "zt-session",
                        "value": "{{api_token}}"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"name\": \"Public-AWS-Router-01\",\r\n  \"appData\": {},\r\n  \"roleAttributes\": [\r\n    \"public\"\r\n  ],\r\n  \"isTunnelerEnabled\": false,\r\n  \"noTraversal\": false,\r\n  \"cost\": 0,\r\n  \"tags\": {},\r\n  \"enrollment\": {\r\n    \"ott\": true\r\n  }\r\n}"
                    },
                    "url": {
                      "raw": "{{controller-api-endpoint}}/edge-routers",
                      "host": [
                        "{{controller-api-endpoint}}"
                      ],
                      "path": [
                        "edge-routers"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Create Edge Router MOP",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "const jsonData = pm.response.json();\r",
                          "pm.globals.set('mopEdgeRouterId', jsonData.id)"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{jwt_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"name\": \"Public-AWS-Router-01\",\n  \"networkId\": \"{{networkId}}\",\n  \"zitiId\": \"{{edgeRouterId}}\",\n  \"provider\": \"AWS\",\n  \"region\": \"us-east-2\",\n  \"linkListener\": true,\n  \"wssListener\": false\n}"
                    },
                    "url": {
                      "raw": "{{api}}/edge-routers",
                      "host": [
                        "{{api}}"
                      ],
                      "path": [
                        "edge-routers"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Create Admin Identity",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "const jsonData = pm.response.json();\r",
                          "pm.globals.set('adminIdentityId', jsonData.data.id)"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "zt-session",
                        "value": "{{api_token}}"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"name\": \"adminUser\",\r\n  \"type\": \"Device\",\r\n  \"appData\": {},\r\n  \"isAdmin\": true,\r\n  \"roleAttributes\": [],\r\n  \"authPolicyId\": \"default\",\r\n  \"tags\": {},\r\n  \"enrollment\": {\r\n    \"ott\": true\r\n  }\r\n}"
                    },
                    "url": {
                      "raw": "{{controller-api-endpoint}}/identities",
                      "host": [
                        "{{controller-api-endpoint}}"
                      ],
                      "path": [
                        "identities"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Create Client Identity",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "const jsonData = pm.response.json();\r",
                          "pm.globals.set('clientIdentityId', jsonData.data.id)\r",
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "zt-session",
                        "value": "{{api_token}}"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"name\": \"testUser\",\r\n  \"type\": \"Device\",\r\n  \"appData\": {},\r\n  \"isAdmin\": false,\r\n  \"roleAttributes\": [\r\n    \"users\"\r\n  ],\r\n  \"authPolicyId\": \"default\",\r\n  \"tags\": {},\r\n  \"enrollment\": {\r\n    \"ott\": true\r\n  }\r\n}"
                    },
                    "url": {
                      "raw": "{{controller-api-endpoint}}/identities",
                      "host": [
                        "{{controller-api-endpoint}}"
                      ],
                      "path": [
                        "identities"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Get Admin Identity JWT",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "const jsonData = pm.response.json();\r",
                          "pm.globals.set('adminIdentityJwt', jsonData.data.enrollment.ott.jwt)"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "zt-session",
                        "value": "{{api_token}}"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    },
                    "url": {
                      "raw": "{{controller-api-endpoint}}/identities/{{adminIdentityId}}",
                      "host": [
                        "{{controller-api-endpoint}}"
                      ],
                      "path": [
                        "identities",
                        "{{adminIdentityId}}"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Get Client Identity JWT",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "const jsonData = pm.response.json();\r",
                          "pm.globals.set('clientIdentityJwt', jsonData.data.enrollment.ott.jwt)"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "zt-session",
                        "value": "{{api_token}}"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    },
                    "url": {
                      "raw": "{{controller-api-endpoint}}/identities/{{clientIdentityId}}",
                      "host": [
                        "{{controller-api-endpoint}}"
                      ],
                      "path": [
                        "identities",
                        "{{clientIdentityId}}"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Configs",
                  "item": [
                    {
                      "name": "Post Config Details Host",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "const jsonData = pm.response.json();\r",
                              "postman.setEnvironmentVariable('hostConfigId1', jsonData.data.id)"
                            ],
                            "type": "text/javascript",
                            "packages": {}
                          }
                        }
                      ],
                      "request": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "key": "zt-session",
                            "value": "{{api_token}}"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n    \"name\": \"details.host.v1\",\r\n    \"configTypeId\": \"NH5p4FpGR\",\r\n    \"data\": {\r\n        \"address\": \"127.0.0.1\",\r\n        \"allowedPortRanges\": [\r\n            {\r\n                \"high\": 9080,\r\n                \"low\": 9080\r\n            }\r\n        ],\r\n        \"allowedProtocols\": [\r\n            \"tcp\"\r\n        ],\r\n        \"forwardPort\": true,\r\n        \"forwardProtocol\": true,\r\n        \"listenOptions\": {\r\n            \"bindUsingEdgeIdentity\": false,\r\n            \"connectTimeout\": \"1s\",\r\n            \"connectTimeoutSeconds\": 1,\r\n            \"identity\": \"\",\r\n            \"precedence\": \"default\"\r\n        }\r\n    }\r\n}"
                        },
                        "url": {
                          "raw": "{{controller-api-endpoint}}/configs/",
                          "host": [
                            "{{controller-api-endpoint}}"
                          ],
                          "path": [
                            "configs",
                            ""
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Post Config Details Intercept",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "const jsonData = pm.response.json();\r",
                              "postman.setEnvironmentVariable('interceptConfigId1', jsonData.data.id)"
                            ],
                            "type": "text/javascript",
                            "packages": {}
                          }
                        }
                      ],
                      "request": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "key": "zt-session",
                            "value": "{{api_token}}"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n  \"name\":\"details.intercept.v1\",\r\n  \"configTypeId\": \"g7cIWbcGg\",\r\n  \"data\":{\r\n    \"addresses\":[\r\n      \"details\"],\r\n    \"dialOptions\":{\r\n      \"identity\":\"\"\r\n    },\r\n    \"portRanges\":[\r\n      {\r\n        \"high\":9080,\r\n        \"low\":9080\r\n      }],\r\n    \"protocols\":[\r\n      \"tcp\"],\r\n    \"sourceIp\":\"\"\r\n  }\r\n}\r\n\r\n\r\n\r\n"
                        },
                        "url": {
                          "raw": "{{controller-api-endpoint}}/configs/",
                          "host": [
                            "{{controller-api-endpoint}}"
                          ],
                          "path": [
                            "configs",
                            ""
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Post Config Productpage Host",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "const jsonData = pm.response.json();\r",
                              "postman.setEnvironmentVariable('hostConfigId2', jsonData.data.id)"
                            ],
                            "type": "text/javascript",
                            "packages": {}
                          }
                        }
                      ],
                      "request": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "key": "zt-session",
                            "value": "{{api_token}}"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n  \"name\":\"productpage.host.v1\",\r\n  \"configTypeId\": \"NH5p4FpGR\",\r\n  \"data\":{\r\n    \"address\":\"127.0.0.1\",\r\n    \"allowedPortRanges\":[\r\n      {\r\n        \"high\":9080,\r\n        \"low\":9080\r\n      }],\r\n    \"allowedProtocols\":[\r\n      \"tcp\"],\r\n    \"forwardPort\":true,\r\n    \"forwardProtocol\":true,\r\n    \"listenOptions\":{\r\n      \"bindUsingEdgeIdentity\":false,\r\n      \"connectTimeout\":\"1s\",\r\n      \"connectTimeoutSeconds\":1,\r\n      \"identity\":\"\",\r\n      \"precedence\":\"default\"\r\n    }\r\n  }\r\n}\r\n\r\n\r\n\r\n"
                        },
                        "url": {
                          "raw": "{{controller-api-endpoint}}/configs/",
                          "host": [
                            "{{controller-api-endpoint}}"
                          ],
                          "path": [
                            "configs",
                            ""
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Post Config Productpage Intercept",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "const jsonData = pm.response.json();\r",
                              "postman.setEnvironmentVariable('interceptConfigId2', jsonData.data.id)"
                            ],
                            "type": "text/javascript",
                            "packages": {}
                          }
                        }
                      ],
                      "request": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "key": "zt-session",
                            "value": "{{api_token}}"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n  \"name\":\"productpage.intercept.v1\",\r\n  \"configTypeId\": \"g7cIWbcGg\",\r\n  \"data\":{\r\n    \"addresses\":[\r\n      \"productpage.ziti\"],\r\n    \"dialOptions\":{\r\n      \"identity\":\"\"\r\n    },\r\n    \"portRanges\":[\r\n      {\r\n        \"high\":9080,\r\n        \"low\":9080\r\n      }],\r\n    \"protocols\":[\r\n      \"tcp\"],\r\n    \"sourceIp\":\"\"\r\n  }\r\n}\r\n\r\n\r\n"
                        },
                        "url": {
                          "raw": "{{controller-api-endpoint}}/configs/",
                          "host": [
                            "{{controller-api-endpoint}}"
                          ],
                          "path": [
                            "configs",
                            ""
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Post Config Ratings Host",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "const jsonData = pm.response.json();\r",
                              "postman.setEnvironmentVariable('hostConfigId3', jsonData.data.id)"
                            ],
                            "type": "text/javascript",
                            "packages": {}
                          }
                        }
                      ],
                      "request": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "key": "zt-session",
                            "value": "{{api_token}}"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n  \"name\":\"ratings.host.v1\",\r\n  \"configTypeId\": \"NH5p4FpGR\",\r\n  \"data\":{\r\n    \"address\":\"127.0.0.1\",\r\n    \"allowedPortRanges\":[\r\n      {\r\n        \"high\":9080,\r\n        \"low\":9080\r\n      }],\r\n    \"allowedProtocols\":[\r\n      \"tcp\"],\r\n    \"forwardPort\":true,\r\n    \"forwardProtocol\":true,\r\n    \"listenOptions\":{\r\n      \"bindUsingEdgeIdentity\":false,\r\n      \"connectTimeout\":\"1s\",\r\n      \"connectTimeoutSeconds\":1,\r\n      \"identity\":\"\",\r\n      \"precedence\":\"default\"\r\n    }\r\n  }\r\n}\r\n\r\n\r\n"
                        },
                        "url": {
                          "raw": "{{controller-api-endpoint}}/configs/",
                          "host": [
                            "{{controller-api-endpoint}}"
                          ],
                          "path": [
                            "configs",
                            ""
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Post Config Ratings Intercept",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "const jsonData = pm.response.json();\r",
                              "postman.setEnvironmentVariable('interceptConfigId3', jsonData.data.id)"
                            ],
                            "type": "text/javascript",
                            "packages": {}
                          }
                        }
                      ],
                      "request": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "key": "zt-session",
                            "value": "{{api_token}}"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n  \"name\":\"ratings.intercept.v1\",\r\n  \"configTypeId\": \"g7cIWbcGg\",\r\n  \"data\":{\r\n    \"addresses\":[\r\n      \"ratings\"],\r\n    \"dialOptions\":{\r\n      \"identity\":\"\"\r\n    },\r\n    \"portRanges\":[\r\n      {\r\n        \"high\":9080,\r\n        \"low\":9080\r\n      }],\r\n    \"protocols\":[\r\n      \"tcp\"],\r\n    \"sourceIp\":\"\"\r\n  }\r\n}\r\n\r\n\r\n\r\n"
                        },
                        "url": {
                          "raw": "{{controller-api-endpoint}}/configs/",
                          "host": [
                            "{{controller-api-endpoint}}"
                          ],
                          "path": [
                            "configs",
                            ""
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Post Config Reviews Host",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "const jsonData = pm.response.json();\r",
                              "postman.setEnvironmentVariable('hostConfigId4', jsonData.data.id)"
                            ],
                            "type": "text/javascript",
                            "packages": {}
                          }
                        }
                      ],
                      "request": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "key": "zt-session",
                            "value": "{{api_token}}"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n  \"name\":\"reviews.host.v1\",\r\n  \"configTypeId\": \"NH5p4FpGR\",\r\n  \"data\":{\r\n    \"address\":\"127.0.0.1\",\r\n    \"allowedPortRanges\":[\r\n      {\r\n        \"high\":9080,\r\n        \"low\":9080\r\n      }],\r\n    \"allowedProtocols\":[\r\n      \"tcp\"],\r\n    \"forwardPort\":true,\r\n    \"forwardProtocol\":true,\r\n    \"listenOptions\":{\r\n      \"bindUsingEdgeIdentity\":false,\r\n      \"connectTimeout\":\"1s\",\r\n      \"connectTimeoutSeconds\":1,\r\n      \"identity\":\"\",\r\n      \"precedence\":\"default\"\r\n    }\r\n  }\r\n}\r\n\r\n\r\n\r\n"
                        },
                        "url": {
                          "raw": "{{controller-api-endpoint}}/configs/",
                          "host": [
                            "{{controller-api-endpoint}}"
                          ],
                          "path": [
                            "configs",
                            ""
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Post Config Reviews Intercept",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "const jsonData = pm.response.json();\r",
                              "postman.setEnvironmentVariable('interceptConfigId4', jsonData.data.id)"
                            ],
                            "type": "text/javascript",
                            "packages": {}
                          }
                        }
                      ],
                      "request": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "key": "zt-session",
                            "value": "{{api_token}}"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n  \"name\":\"reviews.intercept.v1\",\r\n  \"configTypeId\": \"g7cIWbcGg\",\r\n  \"data\":{\r\n    \"addresses\":[\r\n      \"reviews\"],\r\n    \"dialOptions\":{\r\n      \"identity\":\"\"\r\n    },\r\n    \"portRanges\":[\r\n      {\r\n        \"high\":9080,\r\n        \"low\":9080\r\n      }],\r\n    \"protocols\":[\r\n      \"tcp\"],\r\n    \"sourceIp\":\"\"\r\n  }\r\n}\r\n\r\n\r\n\r\n"
                        },
                        "url": {
                          "raw": "{{controller-api-endpoint}}/configs/",
                          "host": [
                            "{{controller-api-endpoint}}"
                          ],
                          "path": [
                            "configs",
                            ""
                          ]
                        }
                      },
                      "response": []
                    }
                  ]
                },
                {
                  "name": "Services",
                  "item": [
                    {
                      "name": "Create Service Details",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              ""
                            ],
                            "type": "text/javascript",
                            "packages": {}
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [
                              ""
                            ],
                            "type": "text/javascript",
                            "packages": {}
                          }
                        }
                      ],
                      "request": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "key": "zt-session",
                            "value": "{{api_token}}"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n  \"name\": \"details-service\",\n  \"roleAttributes\": [\n    \"details\"\n  ],\n  \"configs\": [\n    \"{{hostConfigId1}}\",\n    \"{{interceptConfigId1}}\"\n  ],\n  \"encryptionRequired\": true,\n  \"terminatorStrategy\": \"random\",\n  \"tags\": {}\n}"
                        },
                        "url": {
                          "raw": "{{controller-api-endpoint}}/services/",
                          "host": [
                            "{{controller-api-endpoint}}"
                          ],
                          "path": [
                            "services",
                            ""
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Create Service Productpage",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              ""
                            ],
                            "type": "text/javascript",
                            "packages": {}
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [
                              ""
                            ],
                            "type": "text/javascript",
                            "packages": {}
                          }
                        }
                      ],
                      "request": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "key": "zt-session",
                            "value": "{{api_token}}"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n  \"name\": \"productpage-service\",\n  \"roleAttributes\": [\n    \"productpage\"\n  ],\n  \"configs\": [\n    \"{{hostConfigId2}}\",\n    \"{{interceptConfigId2}}\"\n  ],\n  \"encryptionRequired\": true,\n  \"terminatorStrategy\": \"random\",\n  \"tags\": {}\n}"
                        },
                        "url": {
                          "raw": "{{controller-api-endpoint}}/services/",
                          "host": [
                            "{{controller-api-endpoint}}"
                          ],
                          "path": [
                            "services",
                            ""
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Create Service Ratings",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              ""
                            ],
                            "type": "text/javascript",
                            "packages": {}
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [
                              ""
                            ],
                            "type": "text/javascript",
                            "packages": {}
                          }
                        }
                      ],
                      "request": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "key": "zt-session",
                            "value": "{{api_token}}"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n  \"name\": \"ratings-service\",\n  \"roleAttributes\": [\n    \"ratings\"\n  ],\n  \"configs\": [\n    \"{{hostConfigId3}}\",\n    \"{{interceptConfigId3}}\"\n  ],\n  \"encryptionRequired\": true,\n  \"terminatorStrategy\": \"smartrouting\",\n  \"tags\": {}\n}"
                        },
                        "url": {
                          "raw": "{{controller-api-endpoint}}/services/",
                          "host": [
                            "{{controller-api-endpoint}}"
                          ],
                          "path": [
                            "services",
                            ""
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Create Service Reviews",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              ""
                            ],
                            "type": "text/javascript",
                            "packages": {}
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [
                              ""
                            ],
                            "type": "text/javascript",
                            "packages": {}
                          }
                        }
                      ],
                      "request": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "key": "zt-session",
                            "value": "{{api_token}}"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n  \"name\": \"reviews-service\",\n  \"roleAttributes\": [\n    \"reviews\"\n  ],\n  \"configs\": [\n    \"{{hostConfigId4}}\",\n    \"{{interceptConfigId4}}\"\n  ],\n  \"encryptionRequired\": true,\n  \"terminatorStrategy\": \"random\",\n  \"tags\": {}\n}"
                        },
                        "url": {
                          "raw": "{{controller-api-endpoint}}/services/",
                          "host": [
                            "{{controller-api-endpoint}}"
                          ],
                          "path": [
                            "services",
                            ""
                          ]
                        }
                      },
                      "response": []
                    }
                  ]
                },
                {
                  "name": "Service-Policies",
                  "item": [
                    {
                      "name": "Create Service-Policy App User Dial",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              ""
                            ],
                            "type": "text/javascript",
                            "packages": {}
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [
                              ""
                            ],
                            "type": "text/javascript",
                            "packages": {}
                          }
                        }
                      ],
                      "request": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "key": "zt-session",
                            "value": "{{api_token}}"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n  \"name\":\"app-user-service-policy-dial\",\n  \"type\":\"Dial\",\n  \"serviceRoles\":[\n    \"#productpage\"],\n  \"identityRoles\":[\n    \"#users\"],\n  \"postureCheckRoles\":[\n  ],\n  \"semantic\":\"AnyOf\",\n  \"tags\":{\n  }\n}\n"
                        },
                        "url": {
                          "raw": "{{controller-api-endpoint}}/service-policies/",
                          "host": [
                            "{{controller-api-endpoint}}"
                          ],
                          "path": [
                            "service-policies",
                            ""
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Create Service-Policy Productpage Bind",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              ""
                            ],
                            "type": "text/javascript",
                            "packages": {}
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [
                              ""
                            ],
                            "type": "text/javascript",
                            "packages": {}
                          }
                        }
                      ],
                      "request": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "key": "zt-session",
                            "value": "{{api_token}}"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n  \"name\":\"productpage-service-policy-bind\",\n  \"type\":\"Bind\",\n  \"serviceRoles\":[\n    \"#productpage\"],\n  \"identityRoles\":[\n    \"#productpage\"],\n  \"postureCheckRoles\":[\n  ],\n  \"semantic\":\"AnyOf\",\n  \"tags\":{\n  }\n}\n"
                        },
                        "url": {
                          "raw": "{{controller-api-endpoint}}/service-policies/",
                          "host": [
                            "{{controller-api-endpoint}}"
                          ],
                          "path": [
                            "service-policies",
                            ""
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Create Service-Policy Productpage Dial",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              ""
                            ],
                            "type": "text/javascript",
                            "packages": {}
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [
                              ""
                            ],
                            "type": "text/javascript",
                            "packages": {}
                          }
                        }
                      ],
                      "request": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "key": "zt-session",
                            "value": "{{api_token}}"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n  \"name\":\"productpage-service-policy-dial\",\n  \"type\":\"Dial\",\n  \"serviceRoles\":[\n    \"#details\",\n    \"#reviews\"],\n  \"identityRoles\":[\n    \"#productpage\"],\n  \"postureCheckRoles\":[\n  ],\n  \"semantic\":\"AnyOf\",\n  \"tags\":{\n  }\n}\n"
                        },
                        "url": {
                          "raw": "{{controller-api-endpoint}}/service-policies/",
                          "host": [
                            "{{controller-api-endpoint}}"
                          ],
                          "path": [
                            "service-policies",
                            ""
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Create Service-Policy Details Bind",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              ""
                            ],
                            "type": "text/javascript",
                            "packages": {}
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [
                              ""
                            ],
                            "type": "text/javascript",
                            "packages": {}
                          }
                        }
                      ],
                      "request": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "key": "zt-session",
                            "value": "{{api_token}}"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n  \"name\":\"details-service-policy-bind\",\n  \"type\":\"Bind\",\n  \"serviceRoles\":[\n    \"#details\"],\n  \"identityRoles\":[\n    \"#details\"],\n  \"postureCheckRoles\":[\n  ],\n  \"semantic\":\"AnyOf\",\n  \"tags\":{\n  }\n}\n"
                        },
                        "url": {
                          "raw": "{{controller-api-endpoint}}/service-policies/",
                          "host": [
                            "{{controller-api-endpoint}}"
                          ],
                          "path": [
                            "service-policies",
                            ""
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Create Service-Policy Reviews Bind",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              ""
                            ],
                            "type": "text/javascript",
                            "packages": {}
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [
                              ""
                            ],
                            "type": "text/javascript",
                            "packages": {}
                          }
                        }
                      ],
                      "request": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "key": "zt-session",
                            "value": "{{api_token}}"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n  \"name\":\"reviews-service-policy-bind\",\n  \"type\":\"Bind\",\n  \"serviceRoles\":[\n    \"#reviews\"],\n  \"identityRoles\":[\n    \"#reviews\"],\n  \"postureCheckRoles\":[\n  ],\n  \"semantic\":\"AnyOf\",\n  \"tags\":{\n  }\n}\n"
                        },
                        "url": {
                          "raw": "{{controller-api-endpoint}}/service-policies/",
                          "host": [
                            "{{controller-api-endpoint}}"
                          ],
                          "path": [
                            "service-policies",
                            ""
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Create Service-Policy Reviews Dial",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              ""
                            ],
                            "type": "text/javascript",
                            "packages": {}
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [
                              ""
                            ],
                            "type": "text/javascript",
                            "packages": {}
                          }
                        }
                      ],
                      "request": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "key": "zt-session",
                            "value": "{{api_token}}"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n  \"name\":\"reviews-service-policy-dial\",\n  \"type\":\"Dial\",\n  \"serviceRoles\":[\n    \"#ratings\"],\n  \"identityRoles\":[\n    \"#reviews\"],\n  \"postureCheckRoles\":[\n  ],\n  \"semantic\":\"AnyOf\",\n  \"tags\":{\n  }\n}\n"
                        },
                        "url": {
                          "raw": "{{controller-api-endpoint}}/service-policies/",
                          "host": [
                            "{{controller-api-endpoint}}"
                          ],
                          "path": [
                            "service-policies",
                            ""
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Create Service-Policy Ratings Bind",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              ""
                            ],
                            "type": "text/javascript",
                            "packages": {}
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [
                              ""
                            ],
                            "type": "text/javascript",
                            "packages": {}
                          }
                        }
                      ],
                      "request": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "key": "zt-session",
                            "value": "{{api_token}}"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n  \"name\":\"ratings-service-policy-bind\",\n  \"type\":\"Bind\",\n  \"serviceRoles\":[\n    \"#ratings\"],\n  \"identityRoles\":[\n    \"#ratings\"],\n  \"postureCheckRoles\":[\n  ],\n  \"semantic\":\"AnyOf\",\n  \"tags\":{\n  }\n}\n"
                        },
                        "url": {
                          "raw": "{{controller-api-endpoint}}/service-policies/",
                          "host": [
                            "{{controller-api-endpoint}}"
                          ],
                          "path": [
                            "service-policies",
                            ""
                          ]
                        }
                      },
                      "response": []
                    }
                  ]
                },
                {
                  "name": "Service-Edge-Router-Policies",
                  "item": [
                    {
                      "name": "Create service-edge-router-policy",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              ""
                            ],
                            "type": "text/javascript",
                            "packages": {}
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [
                              ""
                            ],
                            "type": "text/javascript",
                            "packages": {}
                          }
                        }
                      ],
                      "request": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "key": "zt-session",
                            "value": "{{api_token}}"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n  \"name\":\"public-service-router-policy\",\n  \"serviceRoles\":[\n    \"#details\",\n    \"#productpage\",\n    \"#ratings\",\n    \"#reviews\"],\n  \"edgeRouterRoles\":[\n    \"#public\"],\n  \"semantic\":\"AnyOf\",\n  \"tags\":{\n  }\n}\n"
                        },
                        "url": {
                          "raw": "{{controller-api-endpoint}}/service-edge-router-policies",
                          "host": [
                            "{{controller-api-endpoint}}"
                          ],
                          "path": [
                            "service-edge-router-policies"
                          ]
                        }
                      },
                      "response": []
                    }
                  ]
                },
                {
                  "name": "Edge-Router-Policies",
                  "item": [
                    {
                      "name": "Create edge-router-policy",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              ""
                            ],
                            "type": "text/javascript",
                            "packages": {}
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [
                              ""
                            ],
                            "type": "text/javascript",
                            "packages": {}
                          }
                        }
                      ],
                      "request": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "key": "zt-session",
                            "value": "{{api_token}}"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n  \"name\":\"public-router-policy\",\n  \"edgeRouterRoles\":[\n    \"#public\"],\n  \"identityRoles\":[\n    \"#details\",\n    \"#users\",\n    \"#productpage\",\n    \"#ratings\",\n    \"#reviews\"],\n  \"semantic\":\"AnyOf\",\n  \"tags\":{\n  }\n}\n"
                        },
                        "url": {
                          "raw": "{{controller-api-endpoint}}/edge-router-policies",
                          "host": [
                            "{{controller-api-endpoint}}"
                          ],
                          "path": [
                            "edge-router-policies"
                          ]
                        }
                      },
                      "response": []
                    }
                  ]
                }
              ],
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "key": "token",
                    "value": "{{jwt_token}}",
                    "type": "string"
                  }
                ]
              },
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                }
              ]
            }
          EOF
          cat <<EOF >nf-network-services-create.postman_globals.json
            {
              "id": "8cbd9872-4829-4670-ae4f-9642416c3b28",
              "name": "nf-network-services-create",
              "_postman_variable_scope": "global",
              "_postman_exported_at": "2024-06-30T14:59:30.311Z",
              "_postman_exported_using": "Postman/11.2.24",
              "values": [
                {
                  "key": "api",
                  "value": "https://gateway.production.netfoundry.io/core/v3",
                  "enabled": true
                },
                {
                  "key": "token",
                  "value": "https://netfoundry-production-xfjiye.auth.us-east-1.amazoncognito.com/oauth2/token",
                  "enabled": true
                },
                {
                  "key": "jwt_token",
                  "value": "",
                  "enabled": true
                },
                {
                  "key": "jwt_type",
                  "value": "Bearer",
                  "enabled": true
                },
                {
                  "key": "client_id",
                  "value": "${{ secrets.NF_API_CLIENT_ID_FOR_GITHUB }}",
                  "type": "default",
                  "enabled": true
                },
                {
                  "key": "client_secret",
                  "value": ""${{ secrets.NF_API_CLIENT_PW_FOR_GITHUB }}"",
                  "type": "default",
                  "enabled": true
                },
                {
                  "key": "networkName",
                  "value": "$NF_NETWORK_NAME",
                  "type": "any",
                  "enabled": true
                },
                {
                  "key": "networkId",
                  "value": "",
                  "type": "any",
                  "enabled": true
                },
                {
                  "key": "networkStatus",
                  "value": "",
                  "type": "default",
                  "enabled": true
                },
                {
                  "key": "api_token",
                  "value": "",
                  "type": "default",
                  "enabled": true
                },
                {
                  "key": "controller-api-endpoint",
                  "value": "",
                  "type": "default",
                  "enabled": true
                },
                {
                  "key": "edgeRouterId",
                  "value": "",
                  "type": "default",
                  "enabled": true
                },
                {
                  "key": "mopEdgeRouterId",
                  "value": "",
                  "type": "default",
                  "enabled": true
                },
                {
                  "key": "mopEdgeRouterStatus",
                  "value": "",
                  "type": "default",
                  "enabled": true
                },
                {
                  "key": "clientIdentityId",
                  "value": "",
                  "type": "any",
                  "enabled": true
                },
                {
                  "key": "adminIdentityId",
                  "value": "",
                  "type": "default",
                  "enabled": true
                },
                {
                  "key": "clientIdentityJwt",
                  "value": "",
                  "type": "any",
                  "enabled": true
                },
                {
                  "key": "adminIdentityJwt",
                  "value": "",
                  "type": "default",
                  "enabled": true
                },
                {
                  "key": "hostConfigId1",
                  "value": "",
                  "type": "default",
                  "enabled": true
                },
                {
                  "key": "interceptConfigId1",
                  "value": "",
                  "type": "default",
                  "enabled": true
                },
                {
                  "key": "hostConfigId2",
                  "value": "",
                  "type": "default",
                  "enabled": true
                },
                {
                  "key": "interceptConfigId2",
                  "value": "",
                  "type": "default",
                  "enabled": true
                },
                {
                  "key": "hostConfigId3                                                                   ",
                  "value": "",
                  "type": "default",
                  "enabled": true
                },
                {
                  "key": "interceptConfigId3",
                  "value": "",
                  "type": "default",
                  "enabled": true
                },
                {
                  "key": "hostConfigId4",
                  "value": "",
                  "type": "default",
                  "enabled": true
                },
                {
                  "key": "interceptConfigId4",
                  "value": "",
                  "type": "default",
                  "enabled": true
                }
              ]
            }
          EOF
          postman collection run nf-network-services-create.postman_collection.json \
              -g nf-network-services-create.postman_globals.json -k
          export RESPONSE=`curl --silent --location --request POST "https://netfoundry-production-xfjiye.auth.us-east-1.amazoncognito.com/oauth2/token" \
                            --header "Content-Type: application/x-www-form-urlencoded" \
                            --user "$NF_API_CLIENT_ID_FOR_GITHUB:$NF_API_CLIENT_PW_FOR_GITHUB" --data-urlencode "grant_type=client_credentials"`
          export token=`echo $RESPONSE |jq -r .access_token`
          export token_type=`echo $RESPONSE |jq -r .token_type`
          export network_list=`curl --silent --location --request GET "https://gateway.production.netfoundry.io/core/v3/networks" \
              --header "Content-Type: application/json" \
              --header "Authorization: $token_type $token"`
          export network_id=`echo $network_list | jq -r --arg NF_NETWORK_NAME "$NF_NETWORK_NAME" '._embedded.networkList[] | select(.name==$NF_NETWORK_NAME).id'`
          export zt_token=`curl  --silent --location --request POST "https://gateway.production.netfoundry.io/core/v3/networks/$network_id/exchange" \
                --header "Content-Type: application/json" --header "Authorization: $token_type $token" --data "{\"type\": \"session\"}"`
          export identitiy_list=`curl --silent --location --request GET "$(echo $zt_token | jq -r .networkControllerUrl)/identities" --header "Content-Type: application/json" --header "zt-session: $(echo $zt_token | jq -r .value)" -k`
          echo $identitiy_list | jq -r '.data[] | select(.name=="adminUser").enrollment.ott.jwt' > adminUser.jwt
          echo $identitiy_list | jq -r '.data[] | select(.name=="testUser").enrollment.ott.jwt' > testUser.jwt
          ziti edge enroll -j adminUser.jwt -o adminUser.json
          echo "NF_ADMIN_IDENTITY_PATH=adminUser.json" >> $GITHUB_ENV
          sudo ziti-edge-tunnel add --jwt "$(< ./testUser.jwt)" --identity testUser
      # -
      #   name: delete-clusters
      #   if: success() || failure()
      #   run: |
      #     eksctl delete cluster -f ./eks-cluster.yaml --force --disable-nodegroup-eviction 
      #     gcloud container --project $GCP_PROJECT clusters delete $CLUSTER_NAME --region $GKE_REGION --quiet
      - 
        name: delete-nf-network
        if: success() || failure()
        run: |
          if [ -z "$NF_API_CREDENTIALS_PATH" ] || [ -z "$NF_NETWORK_NAME" ]; then
            echo "Error: Variable 'NF_API_CREDENTIALS_PATH' or 'NF_NETWORK_NAME' is not set!"
            exit 1
          fi
          export RESPONSE=`curl --silent --location --request POST "https://netfoundry-production-xfjiye.auth.us-east-1.amazoncognito.com/oauth2/token" \
                                --header "Content-Type: application/x-www-form-urlencoded" \
                                --user "$NF_API_CLIENT_ID_FOR_GITHUB:$NF_API_CLIENT_PW_FOR_GITHUB" --data-urlencode "grant_type=client_credentials"`
          export token=`echo $RESPONSE |jq -r .access_token`
          export token_type=`echo $RESPONSE |jq -r .token_type`
          export network_list=`curl --silent --location --request GET "https://gateway.production.netfoundry.io/core/v3/networks" \
                --header "Content-Type: application/json" \
                --header "Authorization: $token_type $token"`
          export network_id=`echo $network_list | jq -r --arg NF_NETWORK_NAME "$NF_NETWORK_NAME" '._embedded.networkList[] | select(.name==$NF_NETWORK_NAME).id'`
          export network_status=`curl --silent --location --request DELETE "https://gateway.production.netfoundry.io/core/v3/networks/$network_id" \
                --header "Content-Type: application/json" \
                --header "Authorization: $token_type $token"`
          echo $network_status

      # - name: deploy-webhook-2-clusters
      #   run: |
      #     kubectl apply -f 
      #     kubectl apply -f 

    # steps:
    # 
  
