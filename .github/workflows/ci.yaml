name: ci

on:
  push:

env:
  CLUSTER_NAME: ziti-agent-demo 
  AWS_REGION: us-west-2
  GKE_REGION: us-central1
  GKE_NETWORK_NAME: test01
  GKE_SUBNETWORK_NAME: test01

jobs:
  # docker:
  #   runs-on: ubuntu-latest
  #   steps:
  #     -
  #       name: Checkout
  #       uses: actions/checkout@v4
  #     -
  #       name: Set up QEMU
  #       uses: docker/setup-qemu-action@v3
  #     -
  #       name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3
  #     -
  #       name: Login to Docker Hub
  #       uses: docker/login-action@v3
  #       with:
  #         username: ${{ secrets.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_TOKEN }}
  #     -
  #       name: Build and push
  #       uses: docker/build-push-action@v6
  #       with:
  #         context: .
  #         file: Dockerfile
  #         platforms: linux/amd64,linux/arm64
  #         push: true
  #         tags: elblag91/ziti-k8s-agent:${{ github.ref_name }}
  test: 
    # needs: [docker]
    runs-on: ubuntu-latest
    # Add "id-token" with the intended permissions.
    permissions:
      contents: read
      id-token: write

    steps: 
      -
        name: Checkout
        uses: actions/checkout@v4
      - 
        name: Authenticate to AWS Cloud
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_FOR_GITHUB }}
          role-session-name: GitHubActions
          audience: sts.amazonaws.com
      -  
        name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCLOUD_WL_ID_FOR_GITHUB }}
          service_account: ${{ secrets.GCLOUD_SVC_ACCT_FOR_GITHUB }}
          audience: ${{ secrets.GCLOUD_AUD_ID_FOR_GITHUB }}
      -
        name: install-gcloud-cli
        uses: google-github-actions/setup-gcloud@v2
        with:
          version: latest
          install_components: gke-gcloud-auth-plugin
      -
        name: install-kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: latest
      -
        name: install-aws-cli
        uses: unfor19/install-aws-cli-action@v1
        with:
          version: 2                         
          verbose: false                     
          arch: amd64
      - 
        name: install-postman-jq-zet-cli
        run: |
          curl -o- "https://dl-cli.pstmn.io/install/linux64.sh" | sh
          sudo apt-get update
          sudo apt-get --yes install jq 
          curl -sSLf https://get.openziti.io/tun/scripts/install-ubuntu.bash | bash
          sudo systemctl enable --now ziti-edge-tunnel.service
          curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
          sudo mv /tmp/eksctl /usr/local/bin
      - 
        name: create-eks
        run: |
          cat <<EOF >eks-cluster.yaml
          apiVersion: eksctl.io/v1alpha5
          kind: ClusterConfig
          metadata:
            name: $CLUSTER_NAME
            version: "1.28"
          managedNodeGroups:
          - name: ng-1
            instanceType: t3.medium
            iam:
                withAddonPolicies:
                  ebs: true
                  fsx: true
                  efs: true
            desiredCapacity: 2
            privateNetworking: true
            labels:
              nodegroup-type: workloads
            tags:
              nodegroup-role: worker
          vpc:
            cidr: 10.10.0.0/16
            publicAccessCIDRs: []
            # disable public access to endpoint and only allow private access
            clusterEndpoints:
              publicAccess: true
              privateAccess: true
          EOF
          eksctl create cluster -f ./eks-cluster.yaml
      -
        name: delete-eks
        run: eksctl delete cluster -f ./eks-cluster.yaml

      # - 
      #   name: update-kube-config
          # run: |
          #     mkdir -p $HOME/.kube
          #     echo "$KUBE_CONFIG_DATA" | base64 -d > $HOME/.kube/config
          #     aws eks update-kubeconfig --region ${{ env.AWS_REGION }}--name ${{ env.CLUSTER_NAME }}
          
      # - name: deploy-webhook-2-clusters
      #   run: |
      #     kubectl apply -f 
      #     kubectl apply -f 

    # steps:
    # 
  
